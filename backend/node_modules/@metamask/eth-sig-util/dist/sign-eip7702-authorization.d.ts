/// <reference types="node" />
/**
 * The authorization struct as defined in EIP-7702.
 *
 * @property chainId - The chain ID or 0 for any chain.
 * @property contractAddress - The address of the contract being authorized.
 * @property nonce - The nonce of the signing account (at the time of submission).
 */
export declare type EIP7702Authorization = [
    chainId: number,
    contractAddress: string,
    nonce: number
];
/**
 * Sign an authorization message with the provided private key.
 *
 * @param options - The signing options.
 * @param options.privateKey - The private key to sign with.
 * @param options.authorization - The authorization data to sign.
 * @returns The '0x'-prefixed hex encoded signature.
 */
export declare function signEIP7702Authorization({ privateKey, authorization, }: {
    privateKey: Buffer;
    authorization: EIP7702Authorization;
}): string;
/**
 * Recover the address of the account that created the given authorization
 * signature.
 *
 * @param options - The signature recovery options.
 * @param options.signature - The '0x'-prefixed hex encoded message signature.
 * @param options.authorization - The authorization data that was signed.
 * @returns The '0x'-prefixed hex address of the signer.
 */
export declare function recoverEIP7702Authorization({ signature, authorization, }: {
    signature: string;
    authorization: EIP7702Authorization;
}): string;
/**
 * Hash an authorization message according to the signing scheme.
 * The message is encoded according to EIP-7702.
 *
 * @param authorization - The authorization data to hash.
 * @returns The hash of the authorization message as a Buffer.
 */
export declare function hashEIP7702Authorization(authorization: EIP7702Authorization): Buffer;
